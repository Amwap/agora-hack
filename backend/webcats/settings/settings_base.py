"""
Django settings for webcats project.

Generated by 'django-admin startproject' using Django 4.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
import environ

ROOT_DIR = environ.Path(__file__) - 3
env = environ.Env()
env.read_env(str(ROOT_DIR.path('.env')))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG")

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'djoser',

    'apps.auth_app',
    'apps.page_app',
    'apps.editor_app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = True

# CORS_ORIGIN_WHITELIST = (
#     'http://localhost:3000',
# )

ROOT_URLCONF = 'webcats.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'), 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'webcats.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

if env.db("DATABASE_URL"):
    DATABASES = {
            'default': env.db("DATABASE_URL") #postgres://webcats_user:webcats_pass@localhost:5432/webcats_db
        }

else:
    DATABASES = {
            'default': {
                    'ENGINE': 'django.db.backends.sqlite3',
                    'NAME': BASE_DIR / 'db.sqlite3',
                }
        }



# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'

# LANGUAGE_CODE = 'ru-ru'
# TIME_ZONE = 'Europe/Moscow'

USE_I18N = True
USE_TZ = True

AUTH_USER_MODEL = 'auth_app.User'
AUTHENTICATION_BACKENDS = ('apps.auth_app.backends.AuthBackend',)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = 'static/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = "media/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



if env.str('GMAIL_LOGIN'):
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_USE_TLS = True
    EMAIL_PORT = 587
    EMAIL_HOST_USER = env.str('GMAIL_LOGIN')
    EMAIL_HOST_PASSWORD = env.str('GMAIL_PASSWORD')



if env.str('LOGGING'):
    LOGS_DIR = os.path.join(BASE_DIR, 'logs')
    if not os.path.exists(LOGS_DIR):
        os.mkdir(LOGS_DIR)

    DEBUG_FILE = os.path.join(LOGS_DIR, 'debug.log')
    ERROR_FILE = os.path.join(LOGS_DIR, 'error.log')

    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {module} {message}',
                'style': '{',
            },
            'default': {
                'format': '%(levelname)-8s %(asctime)-25s %(message)s',
            },
            'console': {
                'format': '%(levelname)-8s %(message)s',
            }
        },
        'handlers': {
            'file-debug': {
                'level': 'DEBUG',
                'class': 'logging.FileHandler',
                'filename': DEBUG_FILE,
                'formatter': 'verbose',
            },
            'file-warn': {
                'level': 'WARNING',
                'class': 'logging.FileHandler',
                'filename': ERROR_FILE,
                'formatter': 'verbose',
            },
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'verbose',
            },
        },
        'loggers': {
            'django': {
                'handlers': ['file-debug', 'file-warn', 'console'],
                'level': 'WARNING',
                'propagate': True,
            },
        },
        # "root": {"level": "INFO", "handlers": ["console"]},
    }
